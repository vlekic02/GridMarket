name: GridMarket GCP deploy

on:
  push:
    branches:
      - "GM-24-Deploy-Application-Service-to-Compute-Engine"
    #pull_request:
    #branches:
    #  - 'main'
    #types:
    #  - 'closed'

jobs:
  deploy:
    #if: ${{ github.event.pull_request.merged == true }}
    name: Deploy
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.6

      - name: Detect changes
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            application:
              - 'application-service/**'

      - name: Setup Java
        uses: actions/setup-java@v4.2.1
        with:
          distribution: 'temurin'
          java-version: 21
          cache: 'gradle'

      - name: Setup local dependencies
        run: |
          cd jackson-jsonapi/
          chmod +x ./gradlew
          ./gradlew publishToMavenLocal
          cd ../test-utils/
          chmod +x ./gradlew
          ./gradlew publishToMavenLocal

      - name: Build Application Service Image
        #if: steps.filter.outputs.application == 'true'
        id: application-image
        run: |
          cd application-service/
          chmod +x ./gradlew
          VERSION=$(./gradlew printVersion -q)
          ./gradlew bootBuildImage --imageName=${{ vars.REPOSITORY_URL }}/${{ vars.PROJECT_ID }}/gridmarket/application-service:$VERSION
          echo "image-name=${{ vars.REPOSITORY_URL }}/${{ vars.PROJECT_ID }}/gridmarket/application-service:$VERSION" >> $GITHUB_OUTPUT

      - name: Configure docker client for GCP
        #if: fromJson(steps.filter.outputs.changes)[0] != null
        run: |
          gcloud auth configure-docker ${{ vars.REPOSITORY_URL }}

      - name: Push application image to registry
        #if: steps.filter.outputs.application == 'true'
        run: |
          docker push ${{ steps.application-image.outputs.image-name }}

      - name: Deploy application service
        #if: steps.filter.outputs.application == 'true'
        run: |
          gcloud compute instances update-container gm-application-service \
              --container-image=${{ steps.application-image.outputs.image-name }}